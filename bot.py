import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
import logging
import os

TOKEN = os.getenv("BOT_TOKEN")  # –•—Ä–∞–Ω–∏–º —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=TOKEN)
dp = Dispatcher()  # –¢–µ–ø–µ—Ä—å Dispatcher —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤


@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –Ω–∞ aiogram 3.x")


@dp.message(Command("–∏–Ω—Ñ–∞"))
async def info_handler(message: Message):
    user = message.from_user
    text = (f"*–ò–º—è:* {user.first_name} {user.last_name or ''}\n"
            f"*–Æ–∑–µ—Ä–Ω–µ–π–º:* @{user.username or '‚Äî'}\n"
            f"*ID:* {user.id}\n"
            f"*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ:* –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–Ω—É–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É)")
    await message.answer_photo(photo=user.photo, caption=text, parse_mode="Markdown")


async def main():
    dp.include_router(dp)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    await bot.delete_webhook(drop_pending_updates=True)  # –ß–∏—Å—Ç–∏–º –∞–ø–¥–µ–π—Ç—ã
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())

import os
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

TOKEN = os.getenv("8019210319:AAEkPi_tpqON8PoKY563Dq3XpL_tHV5o6pM")

if not TOKEN:
    raise ValueError("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram-–±–æ—Ç –Ω–∞ aiogram 3.x")

async def main():
    dp.include_router(dp)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except Exception as e:
        logging.error(f"üî• –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())

